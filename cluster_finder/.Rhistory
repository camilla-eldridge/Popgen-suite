df2<-protein_info[-1,]
df2<-df2[order(df2$V2),]
# merge dfs #
new<-cbind(df[1], df2)
colnames(new)<-c("allele", "protein", "individual")
return(new)
}
# Merge protein and allele info for each individual #
Merged<-data.frame(merge_cluster_finder(cluster_members_nucl, cluster_members_prot))
# read in group allocations #
Seq_groups<-data.frame(read.csv(groups, header = TRUE))
# order table by Individual to merge group if with Merged table of protein and allele ID's #
Ordered_groups<-Seq_groups[order(Seq_groups$individual),]
# Merge tables #
Merged_ordered<-cbind(Merged, Ordered_groups$group)
# rename colomns, adding user info for group name #
colnames(Merged_ordered)<-c("Allele", "Protein", "Individual", paste(group_name))
# write the final merged table to file #
result <- write.csv(x=Merged_ordered, file=Alelle_and_protein_variants.csv, row.names = FALSE)
# get total n alleles and protein variants in population sample #
n_alleles<-as.numeric(length(unique(Merged_ordered$Allele)))
n_proteins<-as.numeric(length(unique(Merged_ordered$Protein)))
# get groups - as a factor class(groups_unique) #
groups_uniq<-unique(Seq_groups$group)
# get allele and protein variant counts for population sample #
all_allele_counts<-read.csv(cluster_info_nucl, header = TRUE)
all_protein_counts<-read.csv(cluster_info_prot, header = TRUE)
# Get number of individuals in sample #
N_individuals<-sum(all_allele_counts$n_in_cluster)
# Percentage function #
Percentage<-function(N, counts){
all_perc=NULL
X<-split(counts, sort(as.numeric(rownames(counts)))) # splits by row
for (i in X){             # for each colomn in each row... #
perc<-(i[[2]]/N)*100
count_perc<-cbind(i[[1]], i[[2]], perc)
all_perc<-rbind(all_perc, count_perc)
}
return(all_perc)
}
##!/usr/bin/env Rscript
#args = commandArgs(trailingOnly=TRUE)
library(ggplot2)
library(gridExtra)
library(ggpubr)
# Input as csv output from cluster_finder.py #
#cluster_members_nucl<-args[1]
#cluster_members_prot<-args[2]
#cluster_info_nucl<-args[3]
#cluster_info_prot<-args[4]
#groups<-args[5]
#group_name<-args[6]
# Allele ID for each individual in population.
cluster_members_prot<-"test_nucl_cluster_members.csv"
# Protein ID for each individual in population.
cluster_members_nucl<-"test_prot_cluster_members.csv"
# Whole pop allele counts.
cluster_info_nucl<-"test_nucl_cluster_info.txt"
# Whole pop protein counts.
cluster_info_prot<-"test_prot_cluster_info.txt"
# Info on group assignment for each individual
groups<-"group_info.csv"
# name of group for plotting and table generation
group_name="Host"
# Part I: To output a table (csv) displaying allele, protein
# and group infor for each sequence in the population sample.
# Function to merge cluster finder output for protein and dna sequences.
merge_cluster_finder<-function(allele_clust, protein_clust){
allele_info<-read.csv(allele_clust, header = FALSE)
protein_info<-read.csv(protein_clust, header = FALSE)
# order by sequence id to merge #
df<-allele_info[-1,]
df<-df[order(df$V2),]
df2<-protein_info[-1,]
df2<-df2[order(df2$V2),]
# merge dfs #
new<-cbind(df[1], df2)
colnames(new)<-c("allele", "protein", "individual")
return(new)
}
# Merge protein and allele info for each individual #
Merged<-data.frame(merge_cluster_finder(cluster_members_nucl, cluster_members_prot))
# read in group allocations #
Seq_groups<-data.frame(read.csv(groups, header = TRUE))
# order table by Individual to merge group if with Merged table of protein and allele ID's #
Ordered_groups<-Seq_groups[order(Seq_groups$individual),]
# Merge tables #
Merged_ordered<-cbind(Merged, Ordered_groups$group)
# rename colomns, adding user info for group name #
colnames(Merged_ordered)<-c("Allele", "Protein", "Individual", paste(group_name))
# write the final merged table to file #
result <- write.csv(x=Merged_ordered, file="Alelle_and_protein_variants.csv", row.names = FALSE)
# get total n alleles and protein variants in population sample #
n_alleles<-as.numeric(length(unique(Merged_ordered$Allele)))
n_proteins<-as.numeric(length(unique(Merged_ordered$Protein)))
# get groups - as a factor class(groups_unique) #
groups_uniq<-unique(Seq_groups$group)
# get allele and protein variant counts for population sample #
all_allele_counts<-read.csv(cluster_info_nucl, header = TRUE)
all_protein_counts<-read.csv(cluster_info_prot, header = TRUE)
# Get number of individuals in sample #
N_individuals<-sum(all_allele_counts$n_in_cluster)
# Percentage function #
Percentage<-function(N, counts){
all_perc=NULL
X<-split(counts, sort(as.numeric(rownames(counts)))) # splits by row
for (i in X){             # for each colomn in each row... #
perc<-(i[[2]]/N)*100
count_perc<-cbind(i[[1]], i[[2]], perc)
all_perc<-rbind(all_perc, count_perc)
}
return(all_perc)
}
# Get percentage of alleles in entire population #
Perc_alleles<-Percentage(N_individuals, all_allele_counts)
# Get percentage of protein variants in entire population #
Perc_proteins<-Percentage(N_individuals, all_protein_counts)
Perc_proteins
# Get percentage of alleles in entire population #
Perc_alleles<-Percentage(N_individuals, all_allele_counts)
# Get percentage of protein variants in entire population #
Perc_proteins<-Percentage(N_individuals, all_protein_counts)
Perc_proteins
group_all<-rep("All", N_individuals)
group_all
Perc_allele_table<-cbind(Percentage(N_individuals, all_allele_counts), group_all)
# Make group labels for all #
group_all<-rep("All", N_individuals)
# Get percentage of alleles in entire population #
Perc_alleles<-Percentage(N_individuals, all_allele_counts)
Perc_alleles
Perc_allele_table<-cbind(Perc_alleles, group_all)
# Make group labels for all #
group_all<-data.frame(rep("All", N_individuals))
# Get percentage of alleles in entire population #
Perc_alleles<-Percentage(N_individuals, all_allele_counts)
Perc_allele_table<-cbind(Perc_alleles, group_all)
Perc_allele_table<-cbind(Perc_alleles, group_all)
Perc_allele_table
Perc_allele_table<-cbind(Perc_alleles, group_all)
colnames(Perc_allele_table)<-c("Individual", "Count", "Perc_alleles", paste(group_name))
Perc_allele_table
##!/usr/bin/env Rscript
#args = commandArgs(trailingOnly=TRUE)
library(ggplot2)
library(gridExtra)
library(ggpubr)
# Input as csv output from cluster_finder.py #
#cluster_members_nucl<-args[1]
#cluster_members_prot<-args[2]
#cluster_info_nucl<-args[3]
#cluster_info_prot<-args[4]
#groups<-args[5]
#group_name<-args[6]
# Allele ID for each individual in population.
cluster_members_prot<-"test_nucl_cluster_members.csv"
# Protein ID for each individual in population.
cluster_members_nucl<-"test_prot_cluster_members.csv"
# Whole pop allele counts.
cluster_info_nucl<-"test_nucl_cluster_info.txt"
# Whole pop protein counts.
cluster_info_prot<-"test_prot_cluster_info.txt"
# Info on group assignment for each individual
groups<-"group_info.csv"
# name of group for plotting and table generation
group_name="Host"
# Part I: To output a table (csv) displaying allele, protein
# and group infor for each sequence in the population sample.
# Function to merge cluster finder output for protein and dna sequences.
merge_cluster_finder<-function(allele_clust, protein_clust){
allele_info<-read.csv(allele_clust, header = FALSE)
protein_info<-read.csv(protein_clust, header = FALSE)
# order by sequence id to merge #
df<-allele_info[-1,]
df<-df[order(df$V2),]
df2<-protein_info[-1,]
df2<-df2[order(df2$V2),]
# merge dfs #
new<-cbind(df[1], df2)
colnames(new)<-c("allele", "protein", "individual")
return(new)
}
# Merge protein and allele info for each individual #
Merged<-data.frame(merge_cluster_finder(cluster_members_nucl, cluster_members_prot))
# read in group allocations #
Seq_groups<-data.frame(read.csv(groups, header = TRUE))
# order table by Individual to merge group if with Merged table of protein and allele ID's #
Ordered_groups<-Seq_groups[order(Seq_groups$individual),]
# Merge tables #
Merged_ordered<-cbind(Merged, Ordered_groups$group)
# rename colomns, adding user info for group name #
colnames(Merged_ordered)<-c("Allele", "Protein", "Individual", paste(group_name))
# write the final merged table to file #
result <- write.csv(x=Merged_ordered, file="Alelle_and_protein_variants.csv", row.names = FALSE)
# get total n alleles and protein variants in population sample #
n_alleles<-as.numeric(length(unique(Merged_ordered$Allele)))
n_proteins<-as.numeric(length(unique(Merged_ordered$Protein)))
# get groups - as a factor class(groups_unique) #
groups_uniq<-unique(Seq_groups$group)
# get allele and protein variant counts for population sample #
all_allele_counts<-read.csv(cluster_info_nucl, header = TRUE)
all_protein_counts<-read.csv(cluster_info_prot, header = TRUE)
# Get number of individuals in sample #
N_individuals<-sum(all_allele_counts$n_in_cluster)
# Percentage function #
Percentage<-function(N, counts){
all_perc=NULL
X<-split(counts, sort(as.numeric(rownames(counts)))) # splits by row
for (i in X){             # for each colomn in each row... #
perc<-(i[[2]]/N)*100
count_perc<-cbind(i[[1]], i[[2]], perc)
all_perc<-rbind(all_perc, count_perc)
}
return(all_perc)
}
# Make group labels for all #
group_all<-data.frame(rep("All", N_individuals))
# Get percentage of alleles in entire population #
Perc_alleles<-Percentage(N_individuals, all_allele_counts)
Perc_allele_table<-cbind(Perc_alleles, group_all)
colnames(Perc_allele_table)<-c("Individual", "Count", "Perc_alleles", paste(group_name))
# Make group labels for all #
group_all<-data.frame(rep("All", N_individuals))
# Get percentage of alleles in entire population #
Perc_alleles<-Percentage(N_individuals, all_allele_counts)
Perc_allele_table<-cbind(Perc_alleles, group_all)
colnames(Perc_allele_table)<-c("Individual", "Count", "Perc_alleles", paste(group_name))
Perc_allele_table
##!/usr/bin/env Rscript
#args = commandArgs(trailingOnly=TRUE)
library(ggplot2)
library(gridExtra)
library(ggpubr)
# Input as csv output from cluster_finder.py #
#cluster_members_nucl<-args[1]
#cluster_members_prot<-args[2]
#cluster_info_nucl<-args[3]
#cluster_info_prot<-args[4]
#groups<-args[5]
#group_name<-args[6]
# Allele ID for each individual in population.
cluster_members_prot<-"test_nucl_cluster_members.csv"
# Protein ID for each individual in population.
cluster_members_nucl<-"test_prot_cluster_members.csv"
# Whole pop allele counts.
cluster_info_nucl<-"test_nucl_cluster_info.txt"
# Whole pop protein counts.
cluster_info_prot<-"test_prot_cluster_info.txt"
# Info on group assignment for each individual
groups<-"group_info.csv"
# name of group for plotting and table generation
group_name="Host"
# Part I: To output a table (csv) displaying allele, protein
# and group infor for each sequence in the population sample.
# Function to merge cluster finder output for protein and dna sequences.
merge_cluster_finder<-function(allele_clust, protein_clust){
allele_info<-read.csv(allele_clust, header = FALSE)
protein_info<-read.csv(protein_clust, header = FALSE)
# order by sequence id to merge #
df<-allele_info[-1,]
df<-df[order(df$V2),]
df2<-protein_info[-1,]
df2<-df2[order(df2$V2),]
# merge dfs #
new<-cbind(df[1], df2)
colnames(new)<-c("allele", "protein", "individual")
return(new)
}
# Merge protein and allele info for each individual #
Merged<-data.frame(merge_cluster_finder(cluster_members_nucl, cluster_members_prot))
# read in group allocations #
Seq_groups<-data.frame(read.csv(groups, header = TRUE))
# order table by Individual to merge group if with Merged table of protein and allele ID's #
Ordered_groups<-Seq_groups[order(Seq_groups$individual),]
# Merge tables #
Merged_ordered<-cbind(Merged, Ordered_groups$group)
# rename colomns, adding user info for group name #
colnames(Merged_ordered)<-c("Allele", "Protein", "Individual", paste(group_name))
# write the final merged table to file #
result <- write.csv(x=Merged_ordered, file="Alelle_and_protein_variants.csv", row.names = FALSE)
# get total n alleles and protein variants in population sample #
n_alleles<-as.numeric(length(unique(Merged_ordered$Allele)))
n_proteins<-as.numeric(length(unique(Merged_ordered$Protein)))
# get groups - as a factor class(groups_unique) #
groups_uniq<-unique(Seq_groups$group)
# get allele and protein variant counts for population sample #
all_allele_counts<-read.csv(cluster_info_nucl, header = TRUE)
all_protein_counts<-read.csv(cluster_info_prot, header = TRUE)
# Get number of individuals in sample #
N_individuals<-sum(all_allele_counts$n_in_cluster)
# Percentage function #
Percentage<-function(N, counts){
all_perc=NULL
X<-split(counts, sort(as.numeric(rownames(counts)))) # splits by row
for (i in X){             # for each colomn in each row... #
perc<-(i[[2]]/N)*100
count_perc<-cbind(i[[1]], i[[2]], perc)
all_perc<-rbind(all_perc, count_perc)
}
return(all_perc)
}
# Make group labels for all #
group_all<-data.frame(rep("All", N_individuals))
# Get percentage of alleles in entire population #
Perc_alleles<-Percentage(N_individuals, all_allele_counts)
Perc_alleles
Perc_allele_table<-cbind(Perc_alleles, group_all)
colnames(Perc_allele_table)<-c("Individual", "Count", "Perc_alleles", paste(group_name))
Perc_allele_table
Perc_alleles
group_all
# Make group labels for all #
group_all_alleles<-data.frame(rep("All", n_alleles))
group_all_prots<-data.frame(rep("All", n_proteins))
# Get percentage of alleles in entire population #
Perc_alleles<-Percentage(N_individuals, all_allele_counts)
Perc_allele_table<-cbind(Perc_alleles, group_all)
colnames(Perc_allele_table)<-c("Individual", "Count", "Perc_alleles", paste(group_name))
Perc_allele_table
#args = commandArgs(trailingOnly=TRUE)
library(ggplot2)
library(gridExtra)
library(ggpubr)
# Input as csv output from cluster_finder.py #
#cluster_members_nucl<-args[1]
#cluster_members_prot<-args[2]
#cluster_info_nucl<-args[3]
#cluster_info_prot<-args[4]
#groups<-args[5]
#group_name<-args[6]
# Allele ID for each individual in population.
cluster_members_prot<-"test_nucl_cluster_members.csv"
# Protein ID for each individual in population.
cluster_members_nucl<-"test_prot_cluster_members.csv"
# Whole pop allele counts.
cluster_info_nucl<-"test_nucl_cluster_info.txt"
# Whole pop protein counts.
cluster_info_prot<-"test_prot_cluster_info.txt"
# Info on group assignment for each individual
groups<-"group_info.csv"
# name of group for plotting and table generation
group_name="Host"
# Part I: To output a table (csv) displaying allele, protein
# and group infor for each sequence in the population sample.
# Function to merge cluster finder output for protein and dna sequences.
merge_cluster_finder<-function(allele_clust, protein_clust){
allele_info<-read.csv(allele_clust, header = FALSE)
protein_info<-read.csv(protein_clust, header = FALSE)
# order by sequence id to merge #
df<-allele_info[-1,]
df<-df[order(df$V2),]
df2<-protein_info[-1,]
df2<-df2[order(df2$V2),]
# merge dfs #
new<-cbind(df[1], df2)
colnames(new)<-c("allele", "protein", "individual")
return(new)
}
# Merge protein and allele info for each individual #
Merged<-data.frame(merge_cluster_finder(cluster_members_nucl, cluster_members_prot))
# read in group allocations #
Seq_groups<-data.frame(read.csv(groups, header = TRUE))
# order table by Individual to merge group if with Merged table of protein and allele ID's #
Ordered_groups<-Seq_groups[order(Seq_groups$individual),]
# Merge tables #
Merged_ordered<-cbind(Merged, Ordered_groups$group)
# rename colomns, adding user info for group name #
colnames(Merged_ordered)<-c("Allele", "Protein", "Individual", paste(group_name))
# write the final merged table to file #
result <- write.csv(x=Merged_ordered, file="Alelle_and_protein_variants.csv", row.names = FALSE)
# get total n alleles and protein variants in population sample #
n_alleles<-as.numeric(length(unique(Merged_ordered$Allele)))
n_proteins<-as.numeric(length(unique(Merged_ordered$Protein)))
# get groups - as a factor class(groups_unique) #
groups_uniq<-unique(Seq_groups$group)
# get allele and protein variant counts for population sample #
all_allele_counts<-read.csv(cluster_info_nucl, header = TRUE)
all_protein_counts<-read.csv(cluster_info_prot, header = TRUE)
# Get number of individuals in sample #
N_individuals<-sum(all_allele_counts$n_in_cluster)
# Percentage function #
Percentage<-function(N, counts){
all_perc=NULL
X<-split(counts, sort(as.numeric(rownames(counts)))) # splits by row
for (i in X){             # for each colomn in each row... #
perc<-(i[[2]]/N)*100
count_perc<-cbind(i[[1]], i[[2]], perc)
all_perc<-rbind(all_perc, count_perc)
}
return(all_perc)
}
# Make group labels colomn for all #
group_all_alleles<-data.frame(rep("All", n_alleles))
group_all_prots<-data.frame(rep("All", n_proteins))
group_all_alleles
group_all_prots
Perc_alleles<-Percentage(N_individuals, all_allele_counts)
Perc_alleles
Perc_allele_table<-cbind(Perc_alleles, group_all)
Perc_allele_table<-cbind(Perc_alleles, group_all_alleles)
colnames(Perc_allele_table)<-c("Individual", "Count", "Perc_alleles", paste(group_name))
Perc_allele_table
group_all_prots<-data.frame(rep("All", n_proteins))
Perc_proteins<-Percentage(N_individuals, all_protein_counts)
Perc_protein_table<-cbind(Perc_proteins, group_all_prots)
colnames(Perc_protein_table)<-c("Individual", "Count", "Perc_proteins", paste(group_name))
Perc_allele_table
Perc_protein_table
# Make group labels colomn for all #
group_all_alleles<-data.frame(rep("All", n_alleles))
# Get percentage of alleles in entire population #
Perc_alleles<-Percentage(N_individuals, all_allele_counts)
Perc_allele_table<-cbind(Perc_alleles, group_all_alleles)
colnames(Perc_allele_table)<-c("Allele", "Count", "Perc_alleles", paste(group_name))
# Get percentage of protein variants in entire population #
group_all_prots<-data.frame(rep("All", n_proteins))
Perc_proteins<-Percentage(N_individuals, all_protein_counts)
Perc_protein_table<-cbind(Perc_proteins, group_all_prots)
colnames(Perc_protein_table)<-c("Protein", "Count", "Perc_proteins", paste(group_name))
Perc_protein_table
all_protein_counts
Perc_allele_table
all_allele_counts
##!/usr/bin/env Rscript
#args = commandArgs(trailingOnly=TRUE)
library(ggplot2)
library(gridExtra)
library(ggpubr)
# Input as csv output from cluster_finder.py #
#cluster_members_nucl<-args[1]
#cluster_members_prot<-args[2]
#cluster_info_nucl<-args[3]
#cluster_info_prot<-args[4]
#groups<-args[5]
#group_name<-args[6]
# Allele ID for each individual in population.
cluster_members_prot<-"test_nucl_cluster_members.csv"
# Protein ID for each individual in population.
cluster_members_nucl<-"test_prot_cluster_members.csv"
# Whole pop allele counts.
cluster_info_nucl<-"test_nucl_cluster_info.txt"
# Whole pop protein counts.
cluster_info_prot<-"test_prot_cluster_info.txt"
# Info on group assignment for each individual
groups<-"group_info.csv"
# name of group for plotting and table generation
group_name="Host"
# Part I: To output a table (csv) displaying allele, protein
# and group infor for each sequence in the population sample.
# Function to merge cluster finder output for protein and dna sequences.
merge_cluster_finder<-function(allele_clust, protein_clust){
allele_info<-read.csv(allele_clust, header = FALSE)
protein_info<-read.csv(protein_clust, header = FALSE)
# order by sequence id to merge #
df<-allele_info[-1,]
df<-df[order(df$V2),]
df2<-protein_info[-1,]
df2<-df2[order(df2$V2),]
# merge dfs #
new<-cbind(df[1], df2)
colnames(new)<-c("allele", "protein", "individual")
return(new)
}
# Merge protein and allele info for each individual #
Merged<-data.frame(merge_cluster_finder(cluster_members_nucl, cluster_members_prot))
# read in group allocations #
Seq_groups<-data.frame(read.csv(groups, header = TRUE))
# order table by Individual to merge group if with Merged table of protein and allele ID's #
Ordered_groups<-Seq_groups[order(Seq_groups$individual),]
# Merge tables #
Merged_ordered<-cbind(Merged, Ordered_groups$group)
# rename colomns, adding user info for group name #
colnames(Merged_ordered)<-c("Allele", "Protein", "Individual", paste(group_name))
# write the final merged table to file #
result <- write.csv(x=Merged_ordered, file="Alelle_and_protein_variants.csv", row.names = FALSE)
# get total n alleles and protein variants in population sample #
n_alleles<-as.numeric(length(unique(Merged_ordered$Allele)))
n_proteins<-as.numeric(length(unique(Merged_ordered$Protein)))
# get groups - as a factor class(groups_unique) #
groups_uniq<-unique(Seq_groups$group)
# get allele and protein variant counts for population sample #
all_allele_counts<-read.csv(cluster_info_nucl, header = TRUE)
all_protein_counts<-read.csv(cluster_info_prot, header = TRUE)
# Get number of individuals in sample #
N_individuals<-sum(all_allele_counts$n_in_cluster)
# Percentage function #
Percentage<-function(N, counts){
all_perc=NULL
X<-split(counts, sort(as.numeric(rownames(counts)))) # splits by row
for (i in X){             # for each colomn in each row... #
perc<-(i[[2]]/N)*100
count_perc<-cbind(i[[1]], i[[2]], perc)
all_perc<-rbind(all_perc, count_perc)
}
return(all_perc)
}
# Make group labels colomn for all #
group_all_alleles<-data.frame(rep("All", n_alleles))
# Get percentage of alleles in entire population #
Perc_alleles<-Percentage(N_individuals, all_allele_counts)
Perc_allele_table<-cbind(Perc_alleles, group_all_alleles)
colnames(Perc_allele_table)<-c("Allele", "Count", "Perc_alleles", paste(group_name))
# Get percentage of protein variants in entire population #
group_all_prots<-data.frame(rep("All", n_proteins))
Perc_proteins<-Percentage(N_individuals, all_protein_counts)
Perc_protein_table<-cbind(Perc_proteins, group_all_prots)
colnames(Perc_protein_table)<-c("Protein", "Count", "Perc_proteins", paste(group_name))
Perc_allele_table
Perc_protein_table
all_allele_counts
all_protein_counts
Merged_ordered
